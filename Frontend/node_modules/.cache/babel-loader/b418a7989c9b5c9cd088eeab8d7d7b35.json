{"ast":null,"code":"var _jsxFileName = \"/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Text.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Text, Transformer } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextField = _ref => {\n  _s();\n  let {\n    index,\n    element,\n    setIsDragging,\n    editPositionOfElement,\n    setSelectedId,\n    selectedId,\n    editDimensionsOfElement\n  } = _ref;\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  React.useEffect(() => {\n    if (selectedId == element.id) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedId, element]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [selectedId == element.id && /*#__PURE__*/_jsxDEV(Transformer, {\n      ref: trRef,\n      boundBoxFunc: (oldBox, newBox) => {\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      ref: shapeRef,\n      draggable: true,\n      x: element.x,\n      y: element.y,\n      height: element.height,\n      width: element.width,\n      rotation: element.rotation,\n      fontFamily: element.fontFamily,\n      align: element.align,\n      fontSize: element.fontSize,\n      stroke: \"grey\",\n      strokeWidth: isMouseOver && element.id !== selectedId && 1,\n      type: \"text\",\n      fontStyle: element.fontStyle ? element.fontStyle : 400,\n      fill: element.fill,\n      onClick: event => {\n        setSelectedId(element.id);\n        //   event.target.moveToTop();\n        //  trRef.current.moveToTop();   \n      },\n\n      onTap: event => {\n        setSelectedId(element.id);\n        //   event.target.moveToTop();\n        //  trRef.current.moveToTop();   \n      },\n\n      onDragStart: () => {\n        setIsDragging(true);\n      },\n      onDragEnd: event => {\n        editPositionOfElement(element.id, event);\n        setIsDragging(false);\n      },\n      onTransformStart: e => {\n        setIsDragging(true);\n      },\n      onMouseOver: event => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: event => {\n        setIsMouseOver(false);\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n\n        // we will reset it back\n        node.scaleX(1);\n        node.scaleY(1);\n        var width = Math.max(5, node.width() * scaleX);\n        var height = Math.max(node.height() * scaleY);\n        editDimensionsOfElement(element.id, width, height); // node is the transformer we need to get its dimension and set it to the image\n        setIsDragging(false);\n      },\n      text: element.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(TextField, \"OIsa9TaLMh/qlgbjrbKzIOcJ5rM=\");\n_c = TextField;\nexport default TextField;\nvar _c;\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"names":["React","useState","Text","Transformer","jsxDEV","_jsxDEV","TextField","_ref","_s","index","element","setIsDragging","editPositionOfElement","setSelectedId","selectedId","editDimensionsOfElement","shapeRef","useRef","trRef","isMouseOver","setIsMouseOver","useEffect","id","current","nodes","getLayer","batchDraw","Fragment","children","ref","boundBoxFunc","oldBox","newBox","fileName","_jsxFileName","lineNumber","columnNumber","draggable","x","y","height","width","rotation","fontFamily","align","fontSize","stroke","strokeWidth","type","fontStyle","fill","onClick","event","onTap","onDragStart","onDragEnd","onTransformStart","e","onMouseOver","onMouseLeave","onTransformEnd","node","scaleX","scaleY","Math","max","text","_c","$RefreshReg$"],"sources":["/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Text.js"],"sourcesContent":["import React,{useState} from 'react'\r\n\r\nimport { Text ,Transformer} from 'react-konva';\r\n\r\nconst TextField = ({index,element,setIsDragging,editPositionOfElement,setSelectedId,selectedId,editDimensionsOfElement}) => {\r\n \r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  const [isMouseOver,setIsMouseOver] = useState(false)\r\n  \r\n  React.useEffect(() => {\r\n    if (selectedId == element.id) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n      \r\n    }\r\n  }, [selectedId,element]);\r\n  \r\n\r\n  return (\r\n    <React.Fragment >\r\n      \r\n{selectedId == element.id  && (\r\n        <Transformer\r\n           ref={trRef}\r\n           boundBoxFunc={(oldBox, newBox) => {\r\n        \r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n<Text\r\n        ref={shapeRef}\r\n        key={index}\r\n       draggable\r\n       x={element.x}\r\n       y={element.y}\r\n       height={element.height}\r\n       width={element.width}\r\n       rotation ={element.rotation}\r\n       fontFamily={element.fontFamily}\r\n       align={element.align}\r\n       fontSize={element.fontSize}\r\n       stroke={\"grey\"}\r\n       strokeWidth ={isMouseOver && element.id !== selectedId && 1}\r\n      type=\"text\"\r\n      fontStyle={element.fontStyle  ? element.fontStyle : 400}\r\n      fill={element.fill}\r\n\r\n       onClick={(event)=>{setSelectedId(element.id); \r\n        //   event.target.moveToTop();\r\n        //  trRef.current.moveToTop();   \r\n         }}\r\n         onTap={(event)=>{setSelectedId(element.id); \r\n          //   event.target.moveToTop();\r\n          //  trRef.current.moveToTop();   \r\n           }}\r\n\r\n       onDragStart = {()=>{\r\n         setIsDragging(true)\r\n       }}\r\n       onDragEnd ={(event)=>{\r\n         editPositionOfElement(element.id,event)\r\n\r\n         setIsDragging(false)\r\n       }}\r\n       onTransformStart={(e)=>{\r\n        setIsDragging(true)\r\n        \r\n      }}\r\n\r\n      onMouseOver={(event)=>{\r\n        setIsMouseOver(true)\r\n    }}\r\n    \r\n    onMouseLeave={(event)=>{\r\n      setIsMouseOver(false)\r\n  }}\r\n\r\n\r\n      onTransformEnd = {(e)=>{\r\n        const node = shapeRef.current;\r\n      const scaleX = node.scaleX();\r\n      const scaleY = node.scaleY();\r\n\r\n         // we will reset it back\r\n         node.scaleX(1);\r\n         node.scaleY(1);\r\n\r\n        var width = Math.max(5, node.width() * scaleX);\r\n       var  height=   Math.max(node.height() * scaleY);\r\n      editDimensionsOfElement(element.id,width,height) // node is the transformer we need to get its dimension and set it to the image\r\n      setIsDragging(false)\r\n\r\n      }}\r\n      \r\n       text={element.text} />\r\n    </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default TextField\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}