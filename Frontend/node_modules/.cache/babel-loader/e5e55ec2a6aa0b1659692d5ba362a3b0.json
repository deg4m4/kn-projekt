{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant';\n\n// Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nvar aliases = new Map([['Win', 'Meta'], ['Scroll', 'ScrollLock'], ['Spacebar', ' '], ['Down', 'ArrowDown'], ['Left', 'ArrowLeft'], ['Right', 'ArrowRight'], ['Up', 'ArrowUp'], ['Del', 'Delete'], ['Crsel', 'CrSel'], ['Exsel', 'ExSel'], ['Apps', 'ContextMenu'], ['Esc', 'Escape'], ['Decimal', '.'], ['Multiply', '*'], ['Add', '+'], ['Subtract', '-'], ['Divide', '/']]);\nvar shimKeyboardEvent = function shimKeyboardEvent(event) {\n  if (aliases.has(event.key)) {\n    var key = aliases.get(event.key);\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return key;\n      }\n    });\n  }\n};\nvar useKeypress = function useKeypress(keys, handler) {\n  !(Array.isArray(keys) || typeof keys === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `keys` to be an array or string') : invariant(false) : void 0;\n  if (Array.isArray(keys)) {\n    keys.forEach(function (key, i) {\n      !(typeof key === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected `keys[\" + i + \"]` to be a string\") : invariant(false) : void 0;\n    });\n  }\n  !(typeof handler === 'function' || handler == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      shimKeyboardEvent(event);\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler == null ? void 0 : handler(event);\n      }\n    };\n  }, [keys, handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      eventListenerRef.current(event);\n    };\n    window.addEventListener('keydown', eventListener);\n    return function () {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\nexport { useKeypress as default };","map":null,"metadata":{},"sourceType":"module"}