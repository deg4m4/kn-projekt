{"ast":null,"code":"import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Konva._global);\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n  return snapped;\n}\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n    this._createElements();\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n  setNodes() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n    this._nodes = nodes;\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n        this._resetTransformCache();\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n      this._proxyDrag(node);\n    });\n    this._resetTransformCache();\n    var elementsCreated = !!this.findOne('.top-left');\n    if (elementsCreated) {\n      this.update();\n    }\n    return this;\n  }\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n        if (otherNode.isDragging()) {\n          return;\n        }\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n  getNodes() {\n    return this._nodes || [];\n  }\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n    this._nodes = [];\n    this._resetTransformCache();\n  }\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n    this._clearCache('transform');\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n  __getNodeShape(node) {\n    let rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n    let relative = arguments.length > 2 ? arguments[2] : undefined;\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n  __getNodeRect() {\n    var node = this.getNode();\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n  getX() {\n    return this._getNodeRect().x;\n  }\n  getY() {\n    return this._getNodeRect().y;\n  }\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n  _createElements() {\n    this._createBack();\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n    this._createAnchor('rotater');\n  }\n  _createAnchor(name) {\n    var anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n  _createBack() {\n    var back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n        }\n        ctx.fillStrokeShape(this);\n      },\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n    this._proxyDrag(back);\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n    var attrs = this._getNodeRect();\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n    this._fire('transformstart', {\n      evt: e.evt,\n      target: this.getNode()\n    });\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e.evt,\n        target\n      });\n    });\n  }\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n      var oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n      this._fitNodesInto(shape, e);\n      return;\n    }\n    var keepProportion = this.keepRatio() || e.shiftKey;\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n    var centeredScaling = this.centeredScaling() || e.altKey;\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n      var node = this.getNode();\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n      this._movingAnchorName = null;\n    }\n  }\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n    const minSize = 1;\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n    this._nodes.forEach(node => {\n      var _a;\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n    this.rotation(Util._getRotation(newAttrs.rotation));\n    this._resetTransformCache();\n    this.update();\n    this.getLayer().batchDraw();\n  }\n  forceUpdate() {\n    this._resetTransformCache();\n    this.update();\n  }\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n  update() {\n    var _a;\n    var attrs = this._getNodeRect();\n    this.rotation(Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n  isTransforming() {\n    return this._transforming;\n  }\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n    Group.prototype.destroy.call(this);\n    this.detach();\n    this._removeEvents();\n    return this;\n  }\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n  clone(obj) {\n    var node = Node.prototype.clone.call(this, obj);\n    return node;\n  }\n  getClientRect() {\n    if (this.nodes().length > 0) {\n      return super.getClientRect();\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }\n}\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n  return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":null,"metadata":{},"sourceType":"module"}