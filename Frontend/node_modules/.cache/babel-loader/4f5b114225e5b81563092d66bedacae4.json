{"ast":null,"code":"var _jsxFileName = \"/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Path.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Group, Path, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PathShape = _ref => {\n  _s();\n  let {\n    element,\n    setIsDragging,\n    editDimensionsOfPath,\n    editPositionOfElement,\n    selectedId,\n    setSelectedId,\n    editDimensionsOfElement,\n    stageDimensions\n  } = _ref;\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  const [image, status] = useImage(element.fillPatternImage, 'Anonymous');\n  const [counter, setCounter] = useState(0);\n  const [elemento, setElement] = useState(element);\n  React.useEffect(() => {\n    if (selectedId == element.id && element.isLocked == false) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedId]);\n  React.useEffect(() => {\n    let temp = counter + 2;\n    setCounter(temp);\n  }, [element.fillPatternOffsetX, element.fillPatternOffsetY, element.fillPatternRotation, element.isLocked]);\n\n  /////////////////////////\n\n  ////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Path, {\n      ref: shapeRef,\n      draggable: element.isLocked ? false : true,\n      x: element.x,\n      y: element.y,\n      id: element.id,\n      name: element.id.toString(),\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      width: element.width,\n      rotation: element.rotation,\n      height: element.height,\n      scaleX: element.scaleX,\n      scaleY: element.scaleY,\n      fill: element.fill !== null ? element.fill : undefined,\n      fillPatternImage: image,\n      fillPatternRepeat: \"no-repeat\",\n      fillPatternScaleX: element.fillPatternScaleX,\n      fillPatternScaleY: element.fillPatternScaleY,\n      fillPatternRotation: element.fillPatternRotation,\n      opacity: element.opacity,\n      fillPatternOffset: {\n        x: element.fillPatternOffsetX + element.width / 2,\n        y: element.fillPatternOffsetY + element.height / 2\n      },\n      onMouseOver: event => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: event => {\n        setIsMouseOver(false);\n      },\n      onClick: event => {\n        setSelectedId(element.id);\n        if (!element.isLocked) {\n          //  event.target.moveToTop();\n          // trRef.current !== null && trRef.current.moveToTop();\n        }\n      },\n      onTap: event => {\n        setSelectedId(element.id);\n        if (!element.isLocked) {\n          //  event.target.moveToTop();\n          //    trRef.current !== null && trRef.current.moveToTop();\n        }\n      },\n      onDragMove: event => {\n        setIsDragging(true);\n        //     event.target.moveToTop()\n      },\n\n      onDragStart: event => {\n        setIsDragging(true);\n      },\n      onDragEnd: event => {\n        editPositionOfElement(element.id, event);\n        setIsDragging(false);\n      },\n      onTransformStart: e => {\n        setIsDragging(true);\n      },\n      onTransform: e => {\n        editPositionOfElement(element.id, e);\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n        editDimensionsOfPath(element.id, scaleX, scaleY);\n      },\n      data: element.data\n    }, counter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), selectedId == element.id && /*#__PURE__*/_jsxDEV(Transformer, {\n      ref: trRef,\n      onClick: event => {\n        //  event.target.moveToTop()\n      },\n      boundBoxFunc: (oldBox, newBox) => {\n        // limit resize\n        if (newBox.width < 5 || newBox.height < 5) {\n          return oldBox;\n        }\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(PathShape, \"fg4Bnz+Myyf+iGDGcb6WAJyqvdo=\", false, function () {\n  return [useImage];\n});\n_c = PathShape;\nvar _c;\n$RefreshReg$(_c, \"PathShape\");","map":{"version":3,"names":["React","useState","Group","Path","Transformer","useImage","jsxDEV","_jsxDEV","PathShape","_ref","_s","element","setIsDragging","editDimensionsOfPath","editPositionOfElement","selectedId","setSelectedId","editDimensionsOfElement","stageDimensions","isMouseOver","setIsMouseOver","shapeRef","useRef","trRef","image","status","fillPatternImage","counter","setCounter","elemento","setElement","useEffect","id","isLocked","current","nodes","getLayer","batchDraw","temp","fillPatternOffsetX","fillPatternOffsetY","fillPatternRotation","Fragment","children","ref","draggable","x","y","name","toString","stroke","strokeColor","strokeWidth","width","rotation","height","scaleX","scaleY","fill","undefined","fillPatternRepeat","fillPatternScaleX","fillPatternScaleY","opacity","fillPatternOffset","onMouseOver","event","onMouseLeave","onClick","onTap","onDragMove","onDragStart","onDragEnd","onTransformStart","e","onTransform","onTransformEnd","node","data","fileName","_jsxFileName","lineNumber","columnNumber","boundBoxFunc","oldBox","newBox","_c","$RefreshReg$"],"sources":["/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Path.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Group, Path, Transformer } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\nexport const PathShape = ({\r\n  element, setIsDragging, editDimensionsOfPath, editPositionOfElement, selectedId, setSelectedId, editDimensionsOfElement, stageDimensions\r\n}) => {\r\n  const [isMouseOver, setIsMouseOver] = useState(false)\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  const [image, status] = useImage(element.fillPatternImage, 'Anonymous');\r\n  const [counter, setCounter] = useState(0)\r\n\r\n\r\n  const [elemento, setElement] = useState(element)\r\n\r\n  React.useEffect(() => {\r\n    if (selectedId == element.id && element.isLocked == false) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [selectedId]);\r\n\r\n  React.useEffect(() => {\r\n    let temp = counter + 2;\r\n    setCounter(temp)\r\n\r\n  }, [element.fillPatternOffsetX, element.fillPatternOffsetY,element.fillPatternRotation, element.isLocked]);\r\n\r\n\r\n\r\n  /////////////////////////\r\n\r\n  ////////////////////////\r\n\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n\r\n\r\n      <Path\r\n        ref={shapeRef}\r\n\r\n        key={counter}\r\n        draggable={element.isLocked ? false : true}\r\n\r\n        x={element.x}\r\n        y={element.y}\r\n        id={element.id}\r\n\r\n        name={element.id.toString()}\r\n        stroke={element.strokeColor}\r\n        strokeWidth={element.strokeWidth}\r\n        width={element.width}\r\n        rotation={element.rotation}\r\n        height={element.height}\r\n        scaleX={element.scaleX}\r\n        scaleY={element.scaleY}\r\n        fill={element.fill !== null ? element.fill : undefined}\r\n        fillPatternImage={image}\r\n        fillPatternRepeat=\"no-repeat\"\r\n        fillPatternScaleX={element.fillPatternScaleX}\r\n        fillPatternScaleY={element.fillPatternScaleY}\r\n        fillPatternRotation={element.fillPatternRotation}\r\n\r\n        opacity={element.opacity}\r\n\r\n\r\n        fillPatternOffset={{ x: element.fillPatternOffsetX + (element.width / 2), y: element.fillPatternOffsetY + (element.height / 2) }}\r\n        onMouseOver={(event) => {\r\n          setIsMouseOver(true)\r\n        }}\r\n\r\n        onMouseLeave={(event) => {\r\n          setIsMouseOver(false)\r\n        }}\r\n\r\n        onClick={(event) => {\r\n          setSelectedId(element.id);\r\n\r\n          if (!element.isLocked) {\r\n          //  event.target.moveToTop();\r\n           // trRef.current !== null && trRef.current.moveToTop();\r\n          }\r\n        }}\r\n        onTap={(event) => {\r\n\r\n          setSelectedId(element.id);\r\n\r\n          if (!element.isLocked) {\r\n          //  event.target.moveToTop();\r\n        //    trRef.current !== null && trRef.current.moveToTop();\r\n          }\r\n        }}\r\n\r\n        onDragMove={(event) => {\r\n          setIsDragging(true)\r\n     //     event.target.moveToTop()\r\n        }\r\n        }\r\n        onDragStart={(event) => {\r\n          setIsDragging(true)\r\n        }}\r\n        onDragEnd={(event) => {\r\n          editPositionOfElement(element.id, event)\r\n          setIsDragging(false)\r\n\r\n        }}\r\n        onTransformStart={(e) => {\r\n          setIsDragging(true)\r\n\r\n        }}\r\n        onTransform={\r\n          (e) => {\r\n\r\n            editPositionOfElement(element.id, e)\r\n\r\n          }\r\n        }\r\n        onTransformEnd={(e) => {\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          editDimensionsOfPath(element.id, scaleX, scaleY)\r\n\r\n        }}\r\n        data={element.data}\r\n      />\r\n\r\n\r\n      {selectedId == element.id && (\r\n        <Transformer\r\n          ref={trRef}\r\n          onClick={(event) => {\r\n          //  event.target.moveToTop()\r\n\r\n          }}\r\n\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n\r\n      )}\r\n\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}