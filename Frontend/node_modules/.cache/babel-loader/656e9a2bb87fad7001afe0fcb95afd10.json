{"ast":null,"code":"var _jsxFileName = \"/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Image.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Image, Line, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageField = _ref => {\n  _s();\n  let {\n    element,\n    setIsDragging,\n    editPositionOfElement,\n    selectedId,\n    setSelectedId,\n    editDimensionsOfElement,\n    addHelperLine,\n    stageDimensions\n  } = _ref;\n  const [image] = useImage(element.src);\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  const [elemento, setElement] = useState(element);\n  React.useEffect(() => {\n    if (selectedId == element.id) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n    if (image !== undefined) {\n      image.crossOrigin = \"anonymous\";\n    }\n  }, [selectedId]);\n\n  /////////////////////////\n\n  ////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      ref: shapeRef,\n      image: image,\n      draggable: true,\n      x: element.x,\n      y: element.y,\n      name: element.id,\n      stroke: \"grey\",\n      strokeWidth: isMouseOver && element.id !== selectedId ? 1 : 0,\n      width: element.width,\n      rotation: element.rotation,\n      height: element.height,\n      opacity: element.opacity,\n      onMouseOver: event => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: event => {\n        setIsMouseOver(false);\n      },\n      onClick: event => {\n        setSelectedId(element.id);\n        if (!element.isLocked) {\n          //event.target.moveToTop();\n          trRef.current !== null && trRef.current.moveToTop();\n        }\n      },\n      onTap: event => {\n        setSelectedId(element.id);\n        if (!element.isLocked) {\n          //  event.target.moveToTop();\n          trRef.current !== null && trRef.current.moveToTop();\n        }\n      },\n      onDragMove: event => {\n        setIsDragging(true);\n        event.target.moveToTop();\n      },\n      onDragStart: event => {\n        setIsDragging(true);\n      },\n      onDragEnd: event => {\n        editPositionOfElement(element.id, event);\n        setIsDragging(false);\n      },\n      onTransformStart: e => {\n        setIsDragging(true);\n      },\n      onTransform: e => {\n        editPositionOfElement(element.id, e);\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n\n        // we will reset it back\n        node.scaleX(1);\n        node.scaleY(1);\n        var width = Math.max(5, node.width() * scaleX);\n        var height = Math.max(node.height() * scaleY);\n        editDimensionsOfElement(element.id, width, height); // node is the transformer we need to get its dimension and set it to the image\n        setIsDragging(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), selectedId == element.id && /*#__PURE__*/_jsxDEV(Transformer, {\n      ref: trRef,\n      boundBoxFunc: (oldBox, newBox) => {\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageField, \"j5IZCjMpJ2G2b3C5ysfXoYqTxcM=\", false, function () {\n  return [useImage];\n});\n_c = ImageField;\nvar _c;\n$RefreshReg$(_c, \"ImageField\");","map":{"version":3,"names":["React","useState","Image","Line","Transformer","useImage","jsxDEV","_jsxDEV","ImageField","_ref","_s","element","setIsDragging","editPositionOfElement","selectedId","setSelectedId","editDimensionsOfElement","addHelperLine","stageDimensions","image","src","isMouseOver","setIsMouseOver","shapeRef","useRef","trRef","elemento","setElement","useEffect","id","current","nodes","getLayer","batchDraw","undefined","crossOrigin","Fragment","children","ref","draggable","x","y","name","stroke","strokeWidth","width","rotation","height","opacity","onMouseOver","event","onMouseLeave","onClick","isLocked","moveToTop","onTap","onDragMove","target","onDragStart","onDragEnd","onTransformStart","e","onTransform","onTransformEnd","node","scaleX","scaleY","Math","max","fileName","_jsxFileName","lineNumber","columnNumber","boundBoxFunc","oldBox","newBox","_c","$RefreshReg$"],"sources":["/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Image.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Image, Line, Transformer } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\nexport const ImageField = ({\r\n  element, setIsDragging, editPositionOfElement, selectedId, setSelectedId, editDimensionsOfElement, addHelperLine, stageDimensions\r\n}) => {\r\n  const [image] = useImage(element.src);\r\n  \r\n  const [isMouseOver, setIsMouseOver] = useState(false)\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n\r\n  const [elemento, setElement] = useState(element)\r\n\r\n  React.useEffect(() => {\r\n    if (selectedId == element.id) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n    if(image !== undefined ){\r\n      image.crossOrigin=\"anonymous\"\r\n    }\r\n \r\n  }, [selectedId]);\r\n\r\n\r\n\r\n  /////////////////////////\r\n\r\n\r\n  ////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <Image\r\n      \r\n        ref={shapeRef}\r\n        image={ image}\r\n        draggable\r\n        x={element.x}\r\n        y={element.y}\r\n        name={element.id}\r\n        stroke={\"grey\"}\r\n        strokeWidth={isMouseOver && element.id !== selectedId ? 1:0}\r\n        width={element.width}\r\n        rotation={element.rotation}\r\n        height={element.height}\r\n        opacity={element.opacity}\r\n\r\n        onMouseOver={(event) => {\r\n          setIsMouseOver(true)\r\n        }}\r\n\r\n        onMouseLeave={(event) => {\r\n          setIsMouseOver(false)\r\n        }}\r\n\r\n        onClick={(event) => {\r\n          setSelectedId(element.id);\r\n          if (!element.isLocked) {\r\n            //event.target.moveToTop();\r\n            trRef.current !== null && trRef.current.moveToTop();\r\n          }\r\n\r\n        }}\r\n        onTap={(event) => {\r\n          setSelectedId(element.id);\r\n          if (!element.isLocked) {\r\n          //  event.target.moveToTop();\r\n            trRef.current !== null && trRef.current.moveToTop();\r\n          }\r\n        }\r\n\r\n        }\r\n\r\n        onDragMove={(event) => {\r\n          setIsDragging(true)\r\n\r\n          event.target.moveToTop()\r\n\r\n\r\n        }\r\n        }\r\n        onDragStart={(event) => {\r\n          setIsDragging(true)\r\n        }}\r\n        onDragEnd={(event) => {\r\n          editPositionOfElement(element.id, event)\r\n          setIsDragging(false)\r\n\r\n        }}\r\n        onTransformStart={(e) => {\r\n          setIsDragging(true)\r\n\r\n        }}\r\n        onTransform={\r\n          (e) => {\r\n\r\n            editPositionOfElement(element.id, e)\r\n\r\n          }\r\n        }\r\n        onTransformEnd={(e) => {\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n\r\n          var width = Math.max(5, node.width() * scaleX);\r\n          var height = Math.max(node.height() * scaleY);\r\n          editDimensionsOfElement(element.id, width, height) // node is the transformer we need to get its dimension and set it to the image\r\n          setIsDragging(false)\r\n\r\n        }}\r\n      />\r\n\r\n\r\n      {selectedId == element.id && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}