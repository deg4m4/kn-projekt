{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Konva } from '../Global.js';\nimport { getNumberValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Arc extends Shape {\n  _sceneFunc(context) {\n    var angle = Konva.getAngle(this.angle()),\n      clockwise = this.clockwise();\n    context.beginPath();\n    context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);\n    context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  getWidth() {\n    return this.outerRadius() * 2;\n  }\n  getHeight() {\n    return this.outerRadius() * 2;\n  }\n  setWidth(width) {\n    this.outerRadius(width / 2);\n  }\n  setHeight(height) {\n    this.outerRadius(height / 2);\n  }\n  getSelfRect() {\n    const innerRadius = this.innerRadius();\n    const outerRadius = this.outerRadius();\n    const clockwise = this.clockwise();\n    const angle = Konva.getAngle(clockwise ? 360 - this.angle() : this.angle());\n    const boundLeftRatio = Math.cos(Math.min(angle, Math.PI));\n    const boundRightRatio = 1;\n    const boundTopRatio = Math.sin(Math.min(Math.max(Math.PI, angle), 3 * Math.PI / 2));\n    const boundBottomRatio = Math.sin(Math.min(angle, Math.PI / 2));\n    const boundLeft = boundLeftRatio * (boundLeftRatio > 0 ? innerRadius : outerRadius);\n    const boundRight = boundRightRatio * (boundRightRatio > 0 ? outerRadius : innerRadius);\n    const boundTop = boundTopRatio * (boundTopRatio > 0 ? innerRadius : outerRadius);\n    const boundBottom = boundBottomRatio * (boundBottomRatio > 0 ? outerRadius : innerRadius);\n    return {\n      x: boundLeft,\n      y: clockwise ? -1 * boundBottom : boundTop,\n      width: boundRight - boundLeft,\n      height: boundBottom - boundTop\n    };\n  }\n}\nArc.prototype._centroid = true;\nArc.prototype.className = 'Arc';\nArc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\n_registerNode(Arc);\nFactory.addGetterSetter(Arc, 'innerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'outerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'angle', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'clockwise', false, getBooleanValidator());","map":null,"metadata":{},"sourceType":"module"}