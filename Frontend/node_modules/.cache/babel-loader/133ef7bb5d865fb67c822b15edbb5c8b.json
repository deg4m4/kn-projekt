{"ast":null,"code":"import { Util } from './Util.js';\nimport { Container } from './Container.js';\nimport { Node } from './Node.js';\nimport { Factory } from './Factory.js';\nimport { SceneCanvas, HitCanvas } from './Canvas.js';\nimport { getBooleanValidator } from './Validators.js';\nimport { shapes } from './Shape.js';\nimport { _registerNode } from './Global.js';\nvar HASH = '#',\n  BEFORE_DRAW = 'beforeDraw',\n  DRAW = 'draw',\n  INTERSECTION_OFFSETS = [{\n    x: 0,\n    y: 0\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 1,\n    y: 1\n  }, {\n    x: -1,\n    y: 1\n  }],\n  INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;\nexport class Layer extends Container {\n  constructor(config) {\n    super(config);\n    this.canvas = new SceneCanvas();\n    this.hitCanvas = new HitCanvas({\n      pixelRatio: 1\n    });\n    this._waitingForDraw = false;\n    this.on('visibleChange.konva', this._checkVisibility);\n    this._checkVisibility();\n    this.on('imageSmoothingEnabledChange.konva', this._setSmoothEnabled);\n    this._setSmoothEnabled();\n  }\n  createPNGStream() {\n    const c = this.canvas._canvas;\n    return c.createPNGStream();\n  }\n  getCanvas() {\n    return this.canvas;\n  }\n  getNativeCanvasElement() {\n    return this.canvas._canvas;\n  }\n  getHitCanvas() {\n    return this.hitCanvas;\n  }\n  getContext() {\n    return this.getCanvas().getContext();\n  }\n  clear(bounds) {\n    this.getContext().clear(bounds);\n    this.getHitCanvas().getContext().clear(bounds);\n    return this;\n  }\n  setZIndex(index) {\n    super.setZIndex(index);\n    var stage = this.getStage();\n    if (stage && stage.content) {\n      stage.content.removeChild(this.getNativeCanvasElement());\n      if (index < stage.children.length - 1) {\n        stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[index + 1].getCanvas()._canvas);\n      } else {\n        stage.content.appendChild(this.getNativeCanvasElement());\n      }\n    }\n    return this;\n  }\n  moveToTop() {\n    Node.prototype.moveToTop.call(this);\n    var stage = this.getStage();\n    if (stage && stage.content) {\n      stage.content.removeChild(this.getNativeCanvasElement());\n      stage.content.appendChild(this.getNativeCanvasElement());\n    }\n    return true;\n  }\n  moveUp() {\n    var moved = Node.prototype.moveUp.call(this);\n    if (!moved) {\n      return false;\n    }\n    var stage = this.getStage();\n    if (!stage || !stage.content) {\n      return false;\n    }\n    stage.content.removeChild(this.getNativeCanvasElement());\n    if (this.index < stage.children.length - 1) {\n      stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[this.index + 1].getCanvas()._canvas);\n    } else {\n      stage.content.appendChild(this.getNativeCanvasElement());\n    }\n    return true;\n  }\n  moveDown() {\n    if (Node.prototype.moveDown.call(this)) {\n      var stage = this.getStage();\n      if (stage) {\n        var children = stage.children;\n        if (stage.content) {\n          stage.content.removeChild(this.getNativeCanvasElement());\n          stage.content.insertBefore(this.getNativeCanvasElement(), children[this.index + 1].getCanvas()._canvas);\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  moveToBottom() {\n    if (Node.prototype.moveToBottom.call(this)) {\n      var stage = this.getStage();\n      if (stage) {\n        var children = stage.children;\n        if (stage.content) {\n          stage.content.removeChild(this.getNativeCanvasElement());\n          stage.content.insertBefore(this.getNativeCanvasElement(), children[1].getCanvas()._canvas);\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  getLayer() {\n    return this;\n  }\n  remove() {\n    var _canvas = this.getNativeCanvasElement();\n    Node.prototype.remove.call(this);\n    if (_canvas && _canvas.parentNode && Util._isInDocument(_canvas)) {\n      _canvas.parentNode.removeChild(_canvas);\n    }\n    return this;\n  }\n  getStage() {\n    return this.parent;\n  }\n  setSize(_ref) {\n    let {\n      width,\n      height\n    } = _ref;\n    this.canvas.setSize(width, height);\n    this.hitCanvas.setSize(width, height);\n    this._setSmoothEnabled();\n    return this;\n  }\n  _validateAdd(child) {\n    var type = child.getType();\n    if (type !== 'Group' && type !== 'Shape') {\n      Util.throw('You may only add groups and shapes to a layer.');\n    }\n  }\n  _toKonvaCanvas(config) {\n    config = config || {};\n    config.width = config.width || this.getWidth();\n    config.height = config.height || this.getHeight();\n    config.x = config.x !== undefined ? config.x : this.x();\n    config.y = config.y !== undefined ? config.y : this.y();\n    return Node.prototype._toKonvaCanvas.call(this, config);\n  }\n  _checkVisibility() {\n    const visible = this.visible();\n    if (visible) {\n      this.canvas._canvas.style.display = 'block';\n    } else {\n      this.canvas._canvas.style.display = 'none';\n    }\n  }\n  _setSmoothEnabled() {\n    this.getContext()._context.imageSmoothingEnabled = this.imageSmoothingEnabled();\n  }\n  getWidth() {\n    if (this.parent) {\n      return this.parent.width();\n    }\n  }\n  setWidth() {\n    Util.warn('Can not change width of layer. Use \"stage.width(value)\" function instead.');\n  }\n  getHeight() {\n    if (this.parent) {\n      return this.parent.height();\n    }\n  }\n  setHeight() {\n    Util.warn('Can not change height of layer. Use \"stage.height(value)\" function instead.');\n  }\n  batchDraw() {\n    if (!this._waitingForDraw) {\n      this._waitingForDraw = true;\n      Util.requestAnimFrame(() => {\n        this.draw();\n        this._waitingForDraw = false;\n      });\n    }\n    return this;\n  }\n  getIntersection(pos) {\n    if (!this.isListening() || !this.isVisible()) {\n      return null;\n    }\n    var spiralSearchDistance = 1;\n    var continueSearch = false;\n    while (true) {\n      for (let i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {\n        const intersectionOffset = INTERSECTION_OFFSETS[i];\n        const obj = this._getIntersection({\n          x: pos.x + intersectionOffset.x * spiralSearchDistance,\n          y: pos.y + intersectionOffset.y * spiralSearchDistance\n        });\n        const shape = obj.shape;\n        if (shape) {\n          return shape;\n        }\n        continueSearch = !!obj.antialiased;\n        if (!obj.antialiased) {\n          break;\n        }\n      }\n      if (continueSearch) {\n        spiralSearchDistance += 1;\n      } else {\n        return null;\n      }\n    }\n  }\n  _getIntersection(pos) {\n    const ratio = this.hitCanvas.pixelRatio;\n    const p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data;\n    const p3 = p[3];\n    if (p3 === 255) {\n      const colorKey = Util._rgbToHex(p[0], p[1], p[2]);\n      const shape = shapes[HASH + colorKey];\n      if (shape) {\n        return {\n          shape: shape\n        };\n      }\n      return {\n        antialiased: true\n      };\n    } else if (p3 > 0) {\n      return {\n        antialiased: true\n      };\n    }\n    return {};\n  }\n  drawScene(can, top) {\n    var layer = this.getLayer(),\n      canvas = can || layer && layer.getCanvas();\n    this._fire(BEFORE_DRAW, {\n      node: this\n    });\n    if (this.clearBeforeDraw()) {\n      canvas.getContext().clear();\n    }\n    Container.prototype.drawScene.call(this, canvas, top);\n    this._fire(DRAW, {\n      node: this\n    });\n    return this;\n  }\n  drawHit(can, top) {\n    var layer = this.getLayer(),\n      canvas = can || layer && layer.hitCanvas;\n    if (layer && layer.clearBeforeDraw()) {\n      layer.getHitCanvas().getContext().clear();\n    }\n    Container.prototype.drawHit.call(this, canvas, top);\n    return this;\n  }\n  enableHitGraph() {\n    this.hitGraphEnabled(true);\n    return this;\n  }\n  disableHitGraph() {\n    this.hitGraphEnabled(false);\n    return this;\n  }\n  setHitGraphEnabled(val) {\n    Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');\n    this.listening(val);\n  }\n  getHitGraphEnabled(val) {\n    Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');\n    return this.listening();\n  }\n  toggleHitCanvas() {\n    if (!this.parent || !this.parent['content']) {\n      return;\n    }\n    var parent = this.parent;\n    var added = !!this.hitCanvas._canvas.parentNode;\n    if (added) {\n      parent.content.removeChild(this.hitCanvas._canvas);\n    } else {\n      parent.content.appendChild(this.hitCanvas._canvas);\n    }\n  }\n  destroy() {\n    Util.releaseCanvas(this.getNativeCanvasElement(), this.getHitCanvas()._canvas);\n    return super.destroy();\n  }\n}\nLayer.prototype.nodeType = 'Layer';\n_registerNode(Layer);\nFactory.addGetterSetter(Layer, 'imageSmoothingEnabled', true);\nFactory.addGetterSetter(Layer, 'clearBeforeDraw', true);\nFactory.addGetterSetter(Layer, 'hitGraphEnabled', true, getBooleanValidator());","map":null,"metadata":{},"sourceType":"module"}