{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Group } from '../Group.js';\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'padding', 'lineHeight', 'text', 'width', 'height', 'pointerDirection', 'pointerWidth', 'pointerHeight'],\n  CHANGE_KONVA = 'Change.konva',\n  NONE = 'none',\n  UP = 'up',\n  RIGHT = 'right',\n  DOWN = 'down',\n  LEFT = 'left',\n  attrChangeListLen = ATTR_CHANGE_LIST.length;\nexport class Label extends Group {\n  constructor(config) {\n    super(config);\n    this.on('add.konva', function (evt) {\n      this._addListeners(evt.child);\n      this._sync();\n    });\n  }\n  getText() {\n    return this.find('Text')[0];\n  }\n  getTag() {\n    return this.find('Tag')[0];\n  }\n  _addListeners(text) {\n    var that = this,\n      n;\n    var func = function () {\n      that._sync();\n    };\n    for (n = 0; n < attrChangeListLen; n++) {\n      text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);\n    }\n  }\n  getWidth() {\n    return this.getText().width();\n  }\n  getHeight() {\n    return this.getText().height();\n  }\n  _sync() {\n    var text = this.getText(),\n      tag = this.getTag(),\n      width,\n      height,\n      pointerDirection,\n      pointerWidth,\n      x,\n      y,\n      pointerHeight;\n    if (text && tag) {\n      width = text.width();\n      height = text.height();\n      pointerDirection = tag.pointerDirection();\n      pointerWidth = tag.pointerWidth();\n      pointerHeight = tag.pointerHeight();\n      x = 0;\n      y = 0;\n      switch (pointerDirection) {\n        case UP:\n          x = width / 2;\n          y = -1 * pointerHeight;\n          break;\n        case RIGHT:\n          x = width + pointerWidth;\n          y = height / 2;\n          break;\n        case DOWN:\n          x = width / 2;\n          y = height + pointerHeight;\n          break;\n        case LEFT:\n          x = -1 * pointerWidth;\n          y = height / 2;\n          break;\n      }\n      tag.setAttrs({\n        x: -1 * x,\n        y: -1 * y,\n        width: width,\n        height: height\n      });\n      text.setAttrs({\n        x: -1 * x,\n        y: -1 * y\n      });\n    }\n  }\n}\nLabel.prototype.className = 'Label';\n_registerNode(Label);\nexport class Tag extends Shape {\n  _sceneFunc(context) {\n    var width = this.width(),\n      height = this.height(),\n      pointerDirection = this.pointerDirection(),\n      pointerWidth = this.pointerWidth(),\n      pointerHeight = this.pointerHeight(),\n      cornerRadius = this.cornerRadius();\n    let topLeft = 0;\n    let topRight = 0;\n    let bottomLeft = 0;\n    let bottomRight = 0;\n    if (typeof cornerRadius === 'number') {\n      topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);\n    } else {\n      topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);\n      topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);\n      bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);\n      bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);\n    }\n    context.beginPath();\n    context.moveTo(topLeft, 0);\n    if (pointerDirection === UP) {\n      context.lineTo((width - pointerWidth) / 2, 0);\n      context.lineTo(width / 2, -1 * pointerHeight);\n      context.lineTo((width + pointerWidth) / 2, 0);\n    }\n    context.lineTo(width - topRight, 0);\n    context.arc(width - topRight, topRight, topRight, Math.PI * 3 / 2, 0, false);\n    if (pointerDirection === RIGHT) {\n      context.lineTo(width, (height - pointerHeight) / 2);\n      context.lineTo(width + pointerWidth, height / 2);\n      context.lineTo(width, (height + pointerHeight) / 2);\n    }\n    context.lineTo(width, height - bottomRight);\n    context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);\n    if (pointerDirection === DOWN) {\n      context.lineTo((width + pointerWidth) / 2, height);\n      context.lineTo(width / 2, height + pointerHeight);\n      context.lineTo((width - pointerWidth) / 2, height);\n    }\n    context.lineTo(bottomLeft, height);\n    context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);\n    if (pointerDirection === LEFT) {\n      context.lineTo(0, (height + pointerHeight) / 2);\n      context.lineTo(-1 * pointerWidth, height / 2);\n      context.lineTo(0, (height - pointerHeight) / 2);\n    }\n    context.lineTo(0, topLeft);\n    context.arc(topLeft, topLeft, topLeft, Math.PI, Math.PI * 3 / 2, false);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  getSelfRect() {\n    var x = 0,\n      y = 0,\n      pointerWidth = this.pointerWidth(),\n      pointerHeight = this.pointerHeight(),\n      direction = this.pointerDirection(),\n      width = this.width(),\n      height = this.height();\n    if (direction === UP) {\n      y -= pointerHeight;\n      height += pointerHeight;\n    } else if (direction === DOWN) {\n      height += pointerHeight;\n    } else if (direction === LEFT) {\n      x -= pointerWidth * 1.5;\n      width += pointerWidth;\n    } else if (direction === RIGHT) {\n      width += pointerWidth * 1.5;\n    }\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }\n}\nTag.prototype.className = 'Tag';\n_registerNode(Tag);\nFactory.addGetterSetter(Tag, 'pointerDirection', NONE);\nFactory.addGetterSetter(Tag, 'pointerWidth', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'pointerHeight', 0, getNumberValidator());\nFactory.addGetterSetter(Tag, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));","map":null,"metadata":{},"sourceType":"module"}