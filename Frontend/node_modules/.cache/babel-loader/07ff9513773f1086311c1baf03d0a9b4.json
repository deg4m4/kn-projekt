{"ast":null,"code":"import { glob } from './Global.js';\nimport { Util } from './Util.js';\nvar now = function () {\n  if (glob.performance && glob.performance.now) {\n    return function () {\n      return glob.performance.now();\n    };\n  }\n  return function () {\n    return new Date().getTime();\n  };\n}();\nexport class Animation {\n  constructor(func, layers) {\n    this.id = Animation.animIdCounter++;\n    this.frame = {\n      time: 0,\n      timeDiff: 0,\n      lastTime: now(),\n      frameRate: 0\n    };\n    this.func = func;\n    this.setLayers(layers);\n  }\n  setLayers(layers) {\n    var lays = [];\n    if (!layers) {\n      lays = [];\n    } else if (layers.length > 0) {\n      lays = layers;\n    } else {\n      lays = [layers];\n    }\n    this.layers = lays;\n    return this;\n  }\n  getLayers() {\n    return this.layers;\n  }\n  addLayer(layer) {\n    var layers = this.layers,\n      len = layers.length,\n      n;\n    for (n = 0; n < len; n++) {\n      if (layers[n]._id === layer._id) {\n        return false;\n      }\n    }\n    this.layers.push(layer);\n    return true;\n  }\n  isRunning() {\n    var a = Animation,\n      animations = a.animations,\n      len = animations.length,\n      n;\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === this.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n  start() {\n    this.stop();\n    this.frame.timeDiff = 0;\n    this.frame.lastTime = now();\n    Animation._addAnimation(this);\n    return this;\n  }\n  stop() {\n    Animation._removeAnimation(this);\n    return this;\n  }\n  _updateFrameObject(time) {\n    this.frame.timeDiff = time - this.frame.lastTime;\n    this.frame.lastTime = time;\n    this.frame.time += this.frame.timeDiff;\n    this.frame.frameRate = 1000 / this.frame.timeDiff;\n  }\n  static _addAnimation(anim) {\n    this.animations.push(anim);\n    this._handleAnimation();\n  }\n  static _removeAnimation(anim) {\n    var id = anim.id,\n      animations = this.animations,\n      len = animations.length,\n      n;\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === id) {\n        this.animations.splice(n, 1);\n        break;\n      }\n    }\n  }\n  static _runFrames() {\n    var layerHash = {},\n      animations = this.animations,\n      anim,\n      layers,\n      func,\n      n,\n      i,\n      layersLen,\n      layer,\n      key,\n      needRedraw;\n    for (n = 0; n < animations.length; n++) {\n      anim = animations[n];\n      layers = anim.layers;\n      func = anim.func;\n      anim._updateFrameObject(now());\n      layersLen = layers.length;\n      if (func) {\n        needRedraw = func.call(anim, anim.frame) !== false;\n      } else {\n        needRedraw = true;\n      }\n      if (!needRedraw) {\n        continue;\n      }\n      for (i = 0; i < layersLen; i++) {\n        layer = layers[i];\n        if (layer._id !== undefined) {\n          layerHash[layer._id] = layer;\n        }\n      }\n    }\n    for (key in layerHash) {\n      if (!layerHash.hasOwnProperty(key)) {\n        continue;\n      }\n      layerHash[key].batchDraw();\n    }\n  }\n  static _animationLoop() {\n    var Anim = Animation;\n    if (Anim.animations.length) {\n      Anim._runFrames();\n      Util.requestAnimFrame(Anim._animationLoop);\n    } else {\n      Anim.animRunning = false;\n    }\n  }\n  static _handleAnimation() {\n    if (!this.animRunning) {\n      this.animRunning = true;\n      Util.requestAnimFrame(this._animationLoop);\n    }\n  }\n}\nAnimation.animations = [];\nAnimation.animIdCounter = 0;\nAnimation.animRunning = false;","map":null,"metadata":{},"sourceType":"module"}