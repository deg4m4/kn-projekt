{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints();\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n    for (var n = 1; n < points.length; n++) {\n      context.lineTo(points[n].x, points[n].y);\n    }\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n    for (var n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n    return points;\n  }\n  getSelfRect() {\n    const points = this._getPoints();\n    var minX = points[0].x;\n    var maxX = points[0].y;\n    var minY = points[0].x;\n    var maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n  getWidth() {\n    return this.radius() * 2;\n  }\n  getHeight() {\n    return this.radius() * 2;\n  }\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());","map":null,"metadata":{},"sourceType":"module"}