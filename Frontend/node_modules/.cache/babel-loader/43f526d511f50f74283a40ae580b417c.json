{"ast":null,"code":"import { Util } from './Util.js';\nimport { Animation } from './Animation.js';\nimport { Node } from './Node.js';\nimport { Konva } from './Global.js';\nvar blacklist = {\n    node: 1,\n    duration: 1,\n    easing: 1,\n    onFinish: 1,\n    yoyo: 1\n  },\n  PAUSED = 1,\n  PLAYING = 2,\n  REVERSING = 3,\n  idCounter = 0,\n  colorAttrs = ['fill', 'stroke', 'shadowColor'];\nclass TweenEngine {\n  constructor(prop, propFunc, func, begin, finish, duration, yoyo) {\n    this.prop = prop;\n    this.propFunc = propFunc;\n    this.begin = begin;\n    this._pos = begin;\n    this.duration = duration;\n    this._change = 0;\n    this.prevPos = 0;\n    this.yoyo = yoyo;\n    this._time = 0;\n    this._position = 0;\n    this._startTime = 0;\n    this._finish = 0;\n    this.func = func;\n    this._change = finish - this.begin;\n    this.pause();\n  }\n  fire(str) {\n    var handler = this[str];\n    if (handler) {\n      handler();\n    }\n  }\n  setTime(t) {\n    if (t > this.duration) {\n      if (this.yoyo) {\n        this._time = this.duration;\n        this.reverse();\n      } else {\n        this.finish();\n      }\n    } else if (t < 0) {\n      if (this.yoyo) {\n        this._time = 0;\n        this.play();\n      } else {\n        this.reset();\n      }\n    } else {\n      this._time = t;\n      this.update();\n    }\n  }\n  getTime() {\n    return this._time;\n  }\n  setPosition(p) {\n    this.prevPos = this._pos;\n    this.propFunc(p);\n    this._pos = p;\n  }\n  getPosition(t) {\n    if (t === undefined) {\n      t = this._time;\n    }\n    return this.func(t, this.begin, this._change, this.duration);\n  }\n  play() {\n    this.state = PLAYING;\n    this._startTime = this.getTimer() - this._time;\n    this.onEnterFrame();\n    this.fire('onPlay');\n  }\n  reverse() {\n    this.state = REVERSING;\n    this._time = this.duration - this._time;\n    this._startTime = this.getTimer() - this._time;\n    this.onEnterFrame();\n    this.fire('onReverse');\n  }\n  seek(t) {\n    this.pause();\n    this._time = t;\n    this.update();\n    this.fire('onSeek');\n  }\n  reset() {\n    this.pause();\n    this._time = 0;\n    this.update();\n    this.fire('onReset');\n  }\n  finish() {\n    this.pause();\n    this._time = this.duration;\n    this.update();\n    this.fire('onFinish');\n  }\n  update() {\n    this.setPosition(this.getPosition(this._time));\n    this.fire('onUpdate');\n  }\n  onEnterFrame() {\n    var t = this.getTimer() - this._startTime;\n    if (this.state === PLAYING) {\n      this.setTime(t);\n    } else if (this.state === REVERSING) {\n      this.setTime(this.duration - t);\n    }\n  }\n  pause() {\n    this.state = PAUSED;\n    this.fire('onPause');\n  }\n  getTimer() {\n    return new Date().getTime();\n  }\n}\nexport class Tween {\n  constructor(config) {\n    var that = this,\n      node = config.node,\n      nodeId = node._id,\n      duration,\n      easing = config.easing || Easings.Linear,\n      yoyo = !!config.yoyo,\n      key;\n    if (typeof config.duration === 'undefined') {\n      duration = 0.3;\n    } else if (config.duration === 0) {\n      duration = 0.001;\n    } else {\n      duration = config.duration;\n    }\n    this.node = node;\n    this._id = idCounter++;\n    var layers = node.getLayer() || (node instanceof Konva['Stage'] ? node.getLayers() : null);\n    if (!layers) {\n      Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');\n    }\n    this.anim = new Animation(function () {\n      that.tween.onEnterFrame();\n    }, layers);\n    this.tween = new TweenEngine(key, function (i) {\n      that._tweenFunc(i);\n    }, easing, 0, 1, duration * 1000, yoyo);\n    this._addListeners();\n    if (!Tween.attrs[nodeId]) {\n      Tween.attrs[nodeId] = {};\n    }\n    if (!Tween.attrs[nodeId][this._id]) {\n      Tween.attrs[nodeId][this._id] = {};\n    }\n    if (!Tween.tweens[nodeId]) {\n      Tween.tweens[nodeId] = {};\n    }\n    for (key in config) {\n      if (blacklist[key] === undefined) {\n        this._addAttr(key, config[key]);\n      }\n    }\n    this.reset();\n    this.onFinish = config.onFinish;\n    this.onReset = config.onReset;\n    this.onUpdate = config.onUpdate;\n  }\n  _addAttr(key, end) {\n    var node = this.node,\n      nodeId = node._id,\n      start,\n      diff,\n      tweenId,\n      n,\n      len,\n      trueEnd,\n      trueStart,\n      endRGBA;\n    tweenId = Tween.tweens[nodeId][key];\n    if (tweenId) {\n      delete Tween.attrs[nodeId][tweenId][key];\n    }\n    start = node.getAttr(key);\n    if (Util._isArray(end)) {\n      diff = [];\n      len = Math.max(end.length, start.length);\n      if (key === 'points' && end.length !== start.length) {\n        if (end.length > start.length) {\n          trueStart = start;\n          start = Util._prepareArrayForTween(start, end, node.closed());\n        } else {\n          trueEnd = end;\n          end = Util._prepareArrayForTween(end, start, node.closed());\n        }\n      }\n      if (key.indexOf('fill') === 0) {\n        for (n = 0; n < len; n++) {\n          if (n % 2 === 0) {\n            diff.push(end[n] - start[n]);\n          } else {\n            var startRGBA = Util.colorToRGBA(start[n]);\n            endRGBA = Util.colorToRGBA(end[n]);\n            start[n] = startRGBA;\n            diff.push({\n              r: endRGBA.r - startRGBA.r,\n              g: endRGBA.g - startRGBA.g,\n              b: endRGBA.b - startRGBA.b,\n              a: endRGBA.a - startRGBA.a\n            });\n          }\n        }\n      } else {\n        for (n = 0; n < len; n++) {\n          diff.push(end[n] - start[n]);\n        }\n      }\n    } else if (colorAttrs.indexOf(key) !== -1) {\n      start = Util.colorToRGBA(start);\n      endRGBA = Util.colorToRGBA(end);\n      diff = {\n        r: endRGBA.r - start.r,\n        g: endRGBA.g - start.g,\n        b: endRGBA.b - start.b,\n        a: endRGBA.a - start.a\n      };\n    } else {\n      diff = end - start;\n    }\n    Tween.attrs[nodeId][this._id][key] = {\n      start: start,\n      diff: diff,\n      end: end,\n      trueEnd: trueEnd,\n      trueStart: trueStart\n    };\n    Tween.tweens[nodeId][key] = this._id;\n  }\n  _tweenFunc(i) {\n    var node = this.node,\n      attrs = Tween.attrs[node._id][this._id],\n      key,\n      attr,\n      start,\n      diff,\n      newVal,\n      n,\n      len,\n      end;\n    for (key in attrs) {\n      attr = attrs[key];\n      start = attr.start;\n      diff = attr.diff;\n      end = attr.end;\n      if (Util._isArray(start)) {\n        newVal = [];\n        len = Math.max(start.length, end.length);\n        if (key.indexOf('fill') === 0) {\n          for (n = 0; n < len; n++) {\n            if (n % 2 === 0) {\n              newVal.push((start[n] || 0) + diff[n] * i);\n            } else {\n              newVal.push('rgba(' + Math.round(start[n].r + diff[n].r * i) + ',' + Math.round(start[n].g + diff[n].g * i) + ',' + Math.round(start[n].b + diff[n].b * i) + ',' + (start[n].a + diff[n].a * i) + ')');\n            }\n          }\n        } else {\n          for (n = 0; n < len; n++) {\n            newVal.push((start[n] || 0) + diff[n] * i);\n          }\n        }\n      } else if (colorAttrs.indexOf(key) !== -1) {\n        newVal = 'rgba(' + Math.round(start.r + diff.r * i) + ',' + Math.round(start.g + diff.g * i) + ',' + Math.round(start.b + diff.b * i) + ',' + (start.a + diff.a * i) + ')';\n      } else {\n        newVal = start + diff * i;\n      }\n      node.setAttr(key, newVal);\n    }\n  }\n  _addListeners() {\n    this.tween.onPlay = () => {\n      this.anim.start();\n    };\n    this.tween.onReverse = () => {\n      this.anim.start();\n    };\n    this.tween.onPause = () => {\n      this.anim.stop();\n    };\n    this.tween.onFinish = () => {\n      var node = this.node;\n      var attrs = Tween.attrs[node._id][this._id];\n      if (attrs.points && attrs.points.trueEnd) {\n        node.setAttr('points', attrs.points.trueEnd);\n      }\n      if (this.onFinish) {\n        this.onFinish.call(this);\n      }\n    };\n    this.tween.onReset = () => {\n      var node = this.node;\n      var attrs = Tween.attrs[node._id][this._id];\n      if (attrs.points && attrs.points.trueStart) {\n        node.points(attrs.points.trueStart);\n      }\n      if (this.onReset) {\n        this.onReset();\n      }\n    };\n    this.tween.onUpdate = () => {\n      if (this.onUpdate) {\n        this.onUpdate.call(this);\n      }\n    };\n  }\n  play() {\n    this.tween.play();\n    return this;\n  }\n  reverse() {\n    this.tween.reverse();\n    return this;\n  }\n  reset() {\n    this.tween.reset();\n    return this;\n  }\n  seek(t) {\n    this.tween.seek(t * 1000);\n    return this;\n  }\n  pause() {\n    this.tween.pause();\n    return this;\n  }\n  finish() {\n    this.tween.finish();\n    return this;\n  }\n  destroy() {\n    var nodeId = this.node._id,\n      thisId = this._id,\n      attrs = Tween.tweens[nodeId],\n      key;\n    this.pause();\n    for (key in attrs) {\n      delete Tween.tweens[nodeId][key];\n    }\n    delete Tween.attrs[nodeId][thisId];\n  }\n}\nTween.attrs = {};\nTween.tweens = {};\nNode.prototype.to = function (params) {\n  var onFinish = params.onFinish;\n  params.node = this;\n  params.onFinish = function () {\n    this.destroy();\n    if (onFinish) {\n      onFinish();\n    }\n  };\n  var tween = new Tween(params);\n  tween.play();\n};\nexport const Easings = {\n  BackEaseIn(t, b, c, d) {\n    var s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  },\n  BackEaseOut(t, b, c, d) {\n    var s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  },\n  BackEaseInOut(t, b, c, d) {\n    var s = 1.70158;\n    if ((t /= d / 2) < 1) {\n      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n    }\n    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n  },\n  ElasticEaseIn(t, b, c, d, a, p) {\n    var s = 0;\n    if (t === 0) {\n      return b;\n    }\n    if ((t /= d) === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    if (!a || a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n  },\n  ElasticEaseOut(t, b, c, d, a, p) {\n    var s = 0;\n    if (t === 0) {\n      return b;\n    }\n    if ((t /= d) === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    if (!a || a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n  },\n  ElasticEaseInOut(t, b, c, d, a, p) {\n    var s = 0;\n    if (t === 0) {\n      return b;\n    }\n    if ((t /= d / 2) === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    if (!a || a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1) {\n      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    }\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n  },\n  BounceEaseOut(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n      return c * (7.5625 * t * t) + b;\n    } else if (t < 2 / 2.75) {\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n    } else if (t < 2.5 / 2.75) {\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n    } else {\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n    }\n  },\n  BounceEaseIn(t, b, c, d) {\n    return c - Easings.BounceEaseOut(d - t, 0, c, d) + b;\n  },\n  BounceEaseInOut(t, b, c, d) {\n    if (t < d / 2) {\n      return Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;\n    } else {\n      return Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n    }\n  },\n  EaseIn(t, b, c, d) {\n    return c * (t /= d) * t + b;\n  },\n  EaseOut(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  EaseInOut(t, b, c, d) {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t + b;\n    }\n    return -c / 2 * (--t * (t - 2) - 1) + b;\n  },\n  StrongEaseIn(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  },\n  StrongEaseOut(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  },\n  StrongEaseInOut(t, b, c, d) {\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  },\n  Linear(t, b, c, d) {\n    return c * t / d + b;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}