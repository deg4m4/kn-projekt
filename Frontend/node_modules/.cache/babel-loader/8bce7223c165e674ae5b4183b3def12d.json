{"ast":null,"code":"import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { _registerNode } from '../Global.js';\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator } from '../Validators.js';\nexport class Image extends Shape {\n  constructor(attrs) {\n    super(attrs);\n    this.on('imageChange.konva', () => {\n      this._setImageLoad();\n    });\n    this._setImageLoad();\n  }\n  _setImageLoad() {\n    const image = this.image();\n    if (image && image.complete) {\n      return;\n    }\n    if (image && image.readyState === 4) {\n      return;\n    }\n    if (image && image['addEventListener']) {\n      image['addEventListener']('load', () => {\n        this._requestDraw();\n      });\n    }\n  }\n  _useBufferCanvas() {\n    return super._useBufferCanvas(true);\n  }\n  _sceneFunc(context) {\n    const width = this.getWidth();\n    const height = this.getHeight();\n    const cornerRadius = this.cornerRadius();\n    const image = this.attrs.image;\n    let params;\n    if (image) {\n      const cropWidth = this.attrs.cropWidth;\n      const cropHeight = this.attrs.cropHeight;\n      if (cropWidth && cropHeight) {\n        params = [image, this.cropX(), this.cropY(), cropWidth, cropHeight, 0, 0, width, height];\n      } else {\n        params = [image, 0, 0, width, height];\n      }\n    }\n    if (this.hasFill() || this.hasStroke() || cornerRadius) {\n      context.beginPath();\n      cornerRadius ? Util.drawRoundedRectPath(context, width, height, cornerRadius) : context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n    if (image) {\n      if (cornerRadius) {\n        context.clip();\n      }\n      context.drawImage.apply(context, params);\n    }\n  }\n  _hitFunc(context) {\n    var width = this.width(),\n      height = this.height(),\n      cornerRadius = this.cornerRadius();\n    context.beginPath();\n    if (!cornerRadius) {\n      context.rect(0, 0, width, height);\n    } else {\n      Util.drawRoundedRectPath(context, width, height, cornerRadius);\n    }\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  getWidth() {\n    var _a, _b;\n    return (_a = this.attrs.width) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.width;\n  }\n  getHeight() {\n    var _a, _b;\n    return (_a = this.attrs.height) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.height;\n  }\n  static fromURL(url, callback) {\n    let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var img = Util.createImageElement();\n    img.onload = function () {\n      var image = new Image({\n        image: img\n      });\n      callback(image);\n    };\n    img.onerror = onError;\n    img.crossOrigin = 'Anonymous';\n    img.src = url;\n  }\n}\nImage.prototype.className = 'Image';\n_registerNode(Image);\nFactory.addGetterSetter(Image, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));\nFactory.addGetterSetter(Image, 'image');\nFactory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);\nFactory.addGetterSetter(Image, 'cropX', 0, getNumberValidator());\nFactory.addGetterSetter(Image, 'cropY', 0, getNumberValidator());\nFactory.addGetterSetter(Image, 'cropWidth', 0, getNumberValidator());\nFactory.addGetterSetter(Image, 'cropHeight', 0, getNumberValidator());","map":null,"metadata":{},"sourceType":"module"}