{"ast":null,"code":"var _jsxFileName = \"/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Circle.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Circle, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CircleField = _ref => {\n  _s();\n  let {\n    element,\n    setIsDragging,\n    editPositionOfElement,\n    selectedId,\n    setSelectedId,\n    editDimensionsOfElement,\n    addHelperLine,\n    stageDimensions\n  } = _ref;\n  const [isMouseOver, setIsMouseOver] = useState(false);\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  const [image, status] = useImage(element.fillPatternImage, 'Anonymous');\n  const [counter, setCounter] = useState(0);\n  const [elemento, setElement] = useState(element);\n  React.useEffect(() => {\n    if (selectedId == element.id) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selectedId]);\n  React.useEffect(() => {\n    let temp = counter + 2;\n    setCounter(temp);\n  }, [element.fillPatternOffsetX, element.fillPatternOffsetY]);\n\n  /////////////////////////\n\n  ////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Circle, {\n      ref: shapeRef,\n      draggable: true,\n      x: element.x,\n      y: element.y,\n      name: element.id,\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      width: element.width,\n      rotation: element.rotation,\n      height: element.height,\n      fill: element.fill !== null ? element.fill : undefined,\n      fillPatternImage: image,\n      fillPatternRepeat: \"no-repeat\",\n      offsetX: -element.width / 2,\n      fillPatternOffset: {\n        x: element.fillPatternOffsetX + element.width / 2,\n        y: element.fillPatternOffsetY + element.height / 2\n      },\n      fillPatternScale: 1,\n      onMouseOver: event => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: event => {\n        setIsMouseOver(false);\n      },\n      onClick: () => {\n        setSelectedId(element.id);\n      },\n      onTap: () => {\n        setSelectedId(element.id);\n      },\n      onDragMove: event => {\n        setIsDragging(true);\n\n        //  event.target.moveToTop()\n      },\n\n      onDragStart: event => {\n        setIsDragging(true);\n      },\n      onDragEnd: event => {\n        editPositionOfElement(element.id, event);\n        setIsDragging(false);\n      },\n      onTransformStart: e => {\n        setIsDragging(true);\n      },\n      onTransform: e => {\n        editPositionOfElement(element.id, e);\n      },\n      onTransformEnd: e => {\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n\n        // we will reset it back\n        node.scaleX(1);\n        node.scaleY(1);\n        var width = Math.max(5, node.width() * scaleX);\n        var height = Math.max(node.height() * scaleY);\n        editDimensionsOfElement(element.id, width, height); // node is the transformer we need to get its dimension and set it to the image\n        setIsDragging(false);\n      }\n    }, counter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), selectedId == element.id && /*#__PURE__*/_jsxDEV(Transformer, {\n      ref: trRef,\n      boundBoxFunc: (oldBox, newBox) => {\n        return newBox;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(CircleField, \"VdlvJAA/TwMk7Xk5oXKpqwdxKCM=\", false, function () {\n  return [useImage];\n});\n_c = CircleField;\nvar _c;\n$RefreshReg$(_c, \"CircleField\");","map":{"version":3,"names":["React","useState","Circle","Transformer","useImage","jsxDEV","_jsxDEV","CircleField","_ref","_s","element","setIsDragging","editPositionOfElement","selectedId","setSelectedId","editDimensionsOfElement","addHelperLine","stageDimensions","isMouseOver","setIsMouseOver","shapeRef","useRef","trRef","image","status","fillPatternImage","counter","setCounter","elemento","setElement","useEffect","id","current","nodes","getLayer","batchDraw","temp","fillPatternOffsetX","fillPatternOffsetY","Fragment","children","ref","draggable","x","y","name","stroke","strokeColor","strokeWidth","width","rotation","height","fill","undefined","fillPatternRepeat","offsetX","fillPatternOffset","fillPatternScale","onMouseOver","event","onMouseLeave","onClick","onTap","onDragMove","onDragStart","onDragEnd","onTransformStart","e","onTransform","onTransformEnd","node","scaleX","scaleY","Math","max","fileName","_jsxFileName","lineNumber","columnNumber","boundBoxFunc","oldBox","newBox","_c","$RefreshReg$"],"sources":["/home/meparth/kn-projekt/Frontend/src/Components/Editor/Elements/Circle.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport { Circle,Transformer } from 'react-konva';\r\nimport useImage from 'use-image';\r\n\r\nexport const CircleField = ({\r\n  element,setIsDragging,editPositionOfElement,selectedId,setSelectedId,editDimensionsOfElement,addHelperLine,stageDimensions\r\n}) => {\r\n    const [isMouseOver,setIsMouseOver] = useState(false)\r\n    const shapeRef = React.useRef();\r\n    const trRef = React.useRef();\r\n    const [image, status] = useImage(element.fillPatternImage, 'Anonymous');\r\n    const [counter ,setCounter] = useState(0)\r\n\r\n\r\n    const [elemento,setElement]=useState(element)\r\n\r\n    React.useEffect(() => {\r\n        if (selectedId == element.id) {\r\n          // we need to attach transformer manually\r\n          trRef.current.nodes([shapeRef.current]);\r\n          trRef.current.getLayer().batchDraw();\r\n        }\r\n      }, [selectedId]);\r\n      \r\n      React.useEffect(()=>{\r\n        let temp = counter+2;\r\n        setCounter(temp)\r\n        \r\n        },[element.fillPatternOffsetX,element.fillPatternOffsetY]);\r\n  \r\n\r\n\r\n   /////////////////////////\r\n\r\n   \r\n   ////////////////////////\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n          \r\n        <Circle \r\n        \r\n        key={counter}\r\n        ref={shapeRef}\r\n        draggable\r\n        x={element.x}\r\n        y={element.y}\r\n        name={element.id}\r\n        stroke={element.strokeColor}\r\n        strokeWidth ={element.strokeWidth}\r\n        width={element.width}\r\n        rotation={element.rotation}\r\n        height={element.height}\r\n        fill={element.fill !==null  ? element.fill : undefined}\r\n        fillPatternImage={ image}\r\n        fillPatternRepeat=\"no-repeat\"\r\n\r\n        offsetX={-element.width/2}\r\n        fillPatternOffset={  {x:  element.fillPatternOffsetX+ (element.width/2),y:element.fillPatternOffsetY+ ( element.height/2)}}\r\n        fillPatternScale={1}\r\n        onMouseOver={(event)=>{\r\n            setIsMouseOver(true)\r\n        }}\r\n\r\n        onMouseLeave={(event)=>{\r\n          setIsMouseOver(false)\r\n      }}\r\n\r\n        onClick={()=>{setSelectedId(element.id);}}\r\n        onTap={()=>{setSelectedId(element.id);}}\r\n\r\n        onDragMove={(event)=>{\r\n          setIsDragging(true)\r\n\r\n        //  event.target.moveToTop()\r\n\r\n   \r\n        }\r\n      }\r\n        onDragStart = {(event)=>{\r\n            setIsDragging(true)\r\n          }}\r\n          onDragEnd ={(event)=>{\r\n            editPositionOfElement(element.id,event)\r\n            setIsDragging(false)\r\n\r\n          }}\r\n          onTransformStart={(e)=>{\r\n            setIsDragging(true)\r\n            \r\n          }}\r\n          onTransform={\r\n            (e)=>{\r\n       \r\n              editPositionOfElement(element.id,e)\r\n\r\n            }\r\n          }\r\n          onTransformEnd = {(e)=>{\r\n            const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n             // we will reset it back\r\n             node.scaleX(1);\r\n             node.scaleY(1);\r\n\r\n            var width = Math.max(5, node.width() * scaleX);\r\n           var  height=   Math.max(node.height() * scaleY);\r\n          editDimensionsOfElement(element.id,width,height) // node is the transformer we need to get its dimension and set it to the image\r\n          setIsDragging(false)\r\n\r\n          }}\r\n        />\r\n\r\n\r\n        {selectedId == element.id  && (\r\n        <Transformer\r\n           ref={trRef}\r\n           boundBoxFunc={(oldBox, newBox) => {\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n\r\n\r\n             </React.Fragment>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}