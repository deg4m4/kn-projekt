{"ast":null,"code":"import { Konva } from './Global.js';\nexport class Transform {\n  constructor() {\n    let m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [1, 0, 0, 1, 0, 0];\n    this.dirty = false;\n    this.m = m && m.slice() || [1, 0, 0, 1, 0, 0];\n  }\n  reset() {\n    this.m[0] = 1;\n    this.m[1] = 0;\n    this.m[2] = 0;\n    this.m[3] = 1;\n    this.m[4] = 0;\n    this.m[5] = 0;\n  }\n  copy() {\n    return new Transform(this.m);\n  }\n  copyInto(tr) {\n    tr.m[0] = this.m[0];\n    tr.m[1] = this.m[1];\n    tr.m[2] = this.m[2];\n    tr.m[3] = this.m[3];\n    tr.m[4] = this.m[4];\n    tr.m[5] = this.m[5];\n  }\n  point(point) {\n    var m = this.m;\n    return {\n      x: m[0] * point.x + m[2] * point.y + m[4],\n      y: m[1] * point.x + m[3] * point.y + m[5]\n    };\n  }\n  translate(x, y) {\n    this.m[4] += this.m[0] * x + this.m[2] * y;\n    this.m[5] += this.m[1] * x + this.m[3] * y;\n    return this;\n  }\n  scale(sx, sy) {\n    this.m[0] *= sx;\n    this.m[1] *= sx;\n    this.m[2] *= sy;\n    this.m[3] *= sy;\n    return this;\n  }\n  rotate(rad) {\n    var c = Math.cos(rad);\n    var s = Math.sin(rad);\n    var m11 = this.m[0] * c + this.m[2] * s;\n    var m12 = this.m[1] * c + this.m[3] * s;\n    var m21 = this.m[0] * -s + this.m[2] * c;\n    var m22 = this.m[1] * -s + this.m[3] * c;\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    return this;\n  }\n  getTranslation() {\n    return {\n      x: this.m[4],\n      y: this.m[5]\n    };\n  }\n  skew(sx, sy) {\n    var m11 = this.m[0] + this.m[2] * sy;\n    var m12 = this.m[1] + this.m[3] * sy;\n    var m21 = this.m[2] + this.m[0] * sx;\n    var m22 = this.m[3] + this.m[1] * sx;\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    return this;\n  }\n  multiply(matrix) {\n    var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];\n    var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];\n    var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];\n    var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];\n    var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];\n    var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    this.m[4] = dx;\n    this.m[5] = dy;\n    return this;\n  }\n  invert() {\n    var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);\n    var m0 = this.m[3] * d;\n    var m1 = -this.m[1] * d;\n    var m2 = -this.m[2] * d;\n    var m3 = this.m[0] * d;\n    var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);\n    var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\n    this.m[0] = m0;\n    this.m[1] = m1;\n    this.m[2] = m2;\n    this.m[3] = m3;\n    this.m[4] = m4;\n    this.m[5] = m5;\n    return this;\n  }\n  getMatrix() {\n    return this.m;\n  }\n  decompose() {\n    var a = this.m[0];\n    var b = this.m[1];\n    var c = this.m[2];\n    var d = this.m[3];\n    var e = this.m[4];\n    var f = this.m[5];\n    var delta = a * d - b * c;\n    let result = {\n      x: e,\n      y: f,\n      rotation: 0,\n      scaleX: 0,\n      scaleY: 0,\n      skewX: 0,\n      skewY: 0\n    };\n    if (a != 0 || b != 0) {\n      var r = Math.sqrt(a * a + b * b);\n      result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);\n      result.scaleX = r;\n      result.scaleY = delta / r;\n      result.skewX = (a * c + b * d) / delta;\n      result.skewY = 0;\n    } else if (c != 0 || d != 0) {\n      var s = Math.sqrt(c * c + d * d);\n      result.rotation = Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\n      result.scaleX = delta / s;\n      result.scaleY = s;\n      result.skewX = 0;\n      result.skewY = (a * c + b * d) / delta;\n    } else {}\n    result.rotation = Util._getRotation(result.rotation);\n    return result;\n  }\n}\nvar OBJECT_ARRAY = '[object Array]',\n  OBJECT_NUMBER = '[object Number]',\n  OBJECT_STRING = '[object String]',\n  OBJECT_BOOLEAN = '[object Boolean]',\n  PI_OVER_DEG180 = Math.PI / 180,\n  DEG180_OVER_PI = 180 / Math.PI,\n  HASH = '#',\n  EMPTY_STRING = '',\n  ZERO = '0',\n  KONVA_WARNING = 'Konva warning: ',\n  KONVA_ERROR = 'Konva error: ',\n  RGB_PAREN = 'rgb(',\n  COLORS = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 132, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 255, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 203],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [119, 128, 144],\n    slategrey: [119, 128, 144],\n    snow: [255, 255, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    transparent: [255, 255, 255, 0],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 5]\n  },\n  RGB_REGEX = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/,\n  animQueue = [];\nconst req = typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || function (f) {\n  setTimeout(f, 60);\n};\nexport const Util = {\n  _isElement(obj) {\n    return !!(obj && obj.nodeType == 1);\n  },\n  _isFunction(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  },\n  _isPlainObject(obj) {\n    return !!obj && obj.constructor === Object;\n  },\n  _isArray(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_ARRAY;\n  },\n  _isNumber(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_NUMBER && !isNaN(obj) && isFinite(obj);\n  },\n  _isString(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_STRING;\n  },\n  _isBoolean(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;\n  },\n  isObject(val) {\n    return val instanceof Object;\n  },\n  isValidSelector(selector) {\n    if (typeof selector !== 'string') {\n      return false;\n    }\n    var firstChar = selector[0];\n    return firstChar === '#' || firstChar === '.' || firstChar === firstChar.toUpperCase();\n  },\n  _sign(number) {\n    if (number === 0) {\n      return 1;\n    }\n    if (number > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  },\n  requestAnimFrame(callback) {\n    animQueue.push(callback);\n    if (animQueue.length === 1) {\n      req(function () {\n        const queue = animQueue;\n        animQueue = [];\n        queue.forEach(function (cb) {\n          cb();\n        });\n      });\n    }\n  },\n  createCanvasElement() {\n    var canvas = document.createElement('canvas');\n    try {\n      canvas.style = canvas.style || {};\n    } catch (e) {}\n    return canvas;\n  },\n  createImageElement() {\n    return document.createElement('img');\n  },\n  _isInDocument(el) {\n    while (el = el.parentNode) {\n      if (el == document) {\n        return true;\n      }\n    }\n    return false;\n  },\n  _urlToImage(url, callback) {\n    var imageObj = Util.createImageElement();\n    imageObj.onload = function () {\n      callback(imageObj);\n    };\n    imageObj.src = url;\n  },\n  _rgbToHex(r, g, b) {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  },\n  _hexToRgb(hex) {\n    hex = hex.replace(HASH, EMPTY_STRING);\n    var bigint = parseInt(hex, 16);\n    return {\n      r: bigint >> 16 & 255,\n      g: bigint >> 8 & 255,\n      b: bigint & 255\n    };\n  },\n  getRandomColor() {\n    var randColor = (Math.random() * 0xffffff << 0).toString(16);\n    while (randColor.length < 6) {\n      randColor = ZERO + randColor;\n    }\n    return HASH + randColor;\n  },\n  getRGB(color) {\n    var rgb;\n    if (color in COLORS) {\n      rgb = COLORS[color];\n      return {\n        r: rgb[0],\n        g: rgb[1],\n        b: rgb[2]\n      };\n    } else if (color[0] === HASH) {\n      return this._hexToRgb(color.substring(1));\n    } else if (color.substr(0, 4) === RGB_PAREN) {\n      rgb = RGB_REGEX.exec(color.replace(/ /g, ''));\n      return {\n        r: parseInt(rgb[1], 10),\n        g: parseInt(rgb[2], 10),\n        b: parseInt(rgb[3], 10)\n      };\n    } else {\n      return {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n    }\n  },\n  colorToRGBA(str) {\n    str = str || 'black';\n    return Util._namedColorToRBA(str) || Util._hex3ColorToRGBA(str) || Util._hex4ColorToRGBA(str) || Util._hex6ColorToRGBA(str) || Util._hex8ColorToRGBA(str) || Util._rgbColorToRGBA(str) || Util._rgbaColorToRGBA(str) || Util._hslColorToRGBA(str);\n  },\n  _namedColorToRBA(str) {\n    var c = COLORS[str.toLowerCase()];\n    if (!c) {\n      return null;\n    }\n    return {\n      r: c[0],\n      g: c[1],\n      b: c[2],\n      a: 1\n    };\n  },\n  _rgbColorToRGBA(str) {\n    if (str.indexOf('rgb(') === 0) {\n      str = str.match(/rgb\\(([^)]+)\\)/)[1];\n      var parts = str.split(/ *, */).map(Number);\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: 1\n      };\n    }\n  },\n  _rgbaColorToRGBA(str) {\n    if (str.indexOf('rgba(') === 0) {\n      str = str.match(/rgba\\(([^)]+)\\)/)[1];\n      var parts = str.split(/ *, */).map((n, index) => {\n        if (n.slice(-1) === '%') {\n          return index === 3 ? parseInt(n) / 100 : parseInt(n) / 100 * 255;\n        }\n        return Number(n);\n      });\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: parts[3]\n      };\n    }\n  },\n  _hex8ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 9) {\n      return {\n        r: parseInt(str.slice(1, 3), 16),\n        g: parseInt(str.slice(3, 5), 16),\n        b: parseInt(str.slice(5, 7), 16),\n        a: parseInt(str.slice(7, 9), 16) / 0xff\n      };\n    }\n  },\n  _hex6ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 7) {\n      return {\n        r: parseInt(str.slice(1, 3), 16),\n        g: parseInt(str.slice(3, 5), 16),\n        b: parseInt(str.slice(5, 7), 16),\n        a: 1\n      };\n    }\n  },\n  _hex4ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 5) {\n      return {\n        r: parseInt(str[1] + str[1], 16),\n        g: parseInt(str[2] + str[2], 16),\n        b: parseInt(str[3] + str[3], 16),\n        a: parseInt(str[4] + str[4], 16) / 0xff\n      };\n    }\n  },\n  _hex3ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 4) {\n      return {\n        r: parseInt(str[1] + str[1], 16),\n        g: parseInt(str[2] + str[2], 16),\n        b: parseInt(str[3] + str[3], 16),\n        a: 1\n      };\n    }\n  },\n  _hslColorToRGBA(str) {\n    if (/hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.test(str)) {\n      const [_, ...hsl] = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(str);\n      const h = Number(hsl[0]) / 360;\n      const s = Number(hsl[1]) / 100;\n      const l = Number(hsl[2]) / 100;\n      let t2;\n      let t3;\n      let val;\n      if (s === 0) {\n        val = l * 255;\n        return {\n          r: Math.round(val),\n          g: Math.round(val),\n          b: Math.round(val),\n          a: 1\n        };\n      }\n      if (l < 0.5) {\n        t2 = l * (1 + s);\n      } else {\n        t2 = l + s - l * s;\n      }\n      const t1 = 2 * l - t2;\n      const rgb = [0, 0, 0];\n      for (let i = 0; i < 3; i++) {\n        t3 = h + 1 / 3 * -(i - 1);\n        if (t3 < 0) {\n          t3++;\n        }\n        if (t3 > 1) {\n          t3--;\n        }\n        if (6 * t3 < 1) {\n          val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n          val = t2;\n        } else if (3 * t3 < 2) {\n          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n          val = t1;\n        }\n        rgb[i] = val * 255;\n      }\n      return {\n        r: Math.round(rgb[0]),\n        g: Math.round(rgb[1]),\n        b: Math.round(rgb[2]),\n        a: 1\n      };\n    }\n  },\n  haveIntersection(r1, r2) {\n    return !(r2.x > r1.x + r1.width || r2.x + r2.width < r1.x || r2.y > r1.y + r1.height || r2.y + r2.height < r1.y);\n  },\n  cloneObject(obj) {\n    var retObj = {};\n    for (var key in obj) {\n      if (this._isPlainObject(obj[key])) {\n        retObj[key] = this.cloneObject(obj[key]);\n      } else if (this._isArray(obj[key])) {\n        retObj[key] = this.cloneArray(obj[key]);\n      } else {\n        retObj[key] = obj[key];\n      }\n    }\n    return retObj;\n  },\n  cloneArray(arr) {\n    return arr.slice(0);\n  },\n  degToRad(deg) {\n    return deg * PI_OVER_DEG180;\n  },\n  radToDeg(rad) {\n    return rad * DEG180_OVER_PI;\n  },\n  _degToRad(deg) {\n    Util.warn('Util._degToRad is removed. Please use public Util.degToRad instead.');\n    return Util.degToRad(deg);\n  },\n  _radToDeg(rad) {\n    Util.warn('Util._radToDeg is removed. Please use public Util.radToDeg instead.');\n    return Util.radToDeg(rad);\n  },\n  _getRotation(radians) {\n    return Konva.angleDeg ? Util.radToDeg(radians) : radians;\n  },\n  _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  },\n  throw(str) {\n    throw new Error(KONVA_ERROR + str);\n  },\n  error(str) {\n    console.error(KONVA_ERROR + str);\n  },\n  warn(str) {\n    if (!Konva.showWarnings) {\n      return;\n    }\n    console.warn(KONVA_WARNING + str);\n  },\n  each(obj, func) {\n    for (var key in obj) {\n      func(key, obj[key]);\n    }\n  },\n  _inRange(val, left, right) {\n    return left <= val && val < right;\n  },\n  _getProjectionToSegment(x1, y1, x2, y2, x3, y3) {\n    var x, y, dist;\n    var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    if (pd2 == 0) {\n      x = x1;\n      y = y1;\n      dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);\n    } else {\n      var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;\n      if (u < 0) {\n        x = x1;\n        y = y1;\n        dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);\n      } else if (u > 1.0) {\n        x = x2;\n        y = y2;\n        dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);\n      } else {\n        x = x1 + u * (x2 - x1);\n        y = y1 + u * (y2 - y1);\n        dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);\n      }\n    }\n    return [x, y, dist];\n  },\n  _getProjectionToLine(pt, line, isClosed) {\n    var pc = Util.cloneObject(pt);\n    var dist = Number.MAX_VALUE;\n    line.forEach(function (p1, i) {\n      if (!isClosed && i === line.length - 1) {\n        return;\n      }\n      var p2 = line[(i + 1) % line.length];\n      var proj = Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);\n      var px = proj[0],\n        py = proj[1],\n        pdist = proj[2];\n      if (pdist < dist) {\n        pc.x = px;\n        pc.y = py;\n        dist = pdist;\n      }\n    });\n    return pc;\n  },\n  _prepareArrayForTween(startArray, endArray, isClosed) {\n    var n,\n      start = [],\n      end = [];\n    if (startArray.length > endArray.length) {\n      var temp = endArray;\n      endArray = startArray;\n      startArray = temp;\n    }\n    for (n = 0; n < startArray.length; n += 2) {\n      start.push({\n        x: startArray[n],\n        y: startArray[n + 1]\n      });\n    }\n    for (n = 0; n < endArray.length; n += 2) {\n      end.push({\n        x: endArray[n],\n        y: endArray[n + 1]\n      });\n    }\n    var newStart = [];\n    end.forEach(function (point) {\n      var pr = Util._getProjectionToLine(point, start, isClosed);\n      newStart.push(pr.x);\n      newStart.push(pr.y);\n    });\n    return newStart;\n  },\n  _prepareToStringify(obj) {\n    var desc;\n    obj.visitedByCircularReferenceRemoval = true;\n    for (var key in obj) {\n      if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {\n        continue;\n      }\n      desc = Object.getOwnPropertyDescriptor(obj, key);\n      if (obj[key].visitedByCircularReferenceRemoval || Util._isElement(obj[key])) {\n        if (desc.configurable) {\n          delete obj[key];\n        } else {\n          return null;\n        }\n      } else if (Util._prepareToStringify(obj[key]) === null) {\n        if (desc.configurable) {\n          delete obj[key];\n        } else {\n          return null;\n        }\n      }\n    }\n    delete obj.visitedByCircularReferenceRemoval;\n    return obj;\n  },\n  _assign(target, source) {\n    for (var key in source) {\n      target[key] = source[key];\n    }\n    return target;\n  },\n  _getFirstPointerId(evt) {\n    if (!evt.touches) {\n      return evt.pointerId || 999;\n    } else {\n      return evt.changedTouches[0].identifier;\n    }\n  },\n  releaseCanvas() {\n    if (!Konva.releaseCanvasOnDestroy) return;\n    for (var _len = arguments.length, canvases = new Array(_len), _key = 0; _key < _len; _key++) {\n      canvases[_key] = arguments[_key];\n    }\n    canvases.forEach(c => {\n      c.width = 0;\n      c.height = 0;\n    });\n  },\n  drawRoundedRectPath(context, width, height, cornerRadius) {\n    let topLeft = 0;\n    let topRight = 0;\n    let bottomLeft = 0;\n    let bottomRight = 0;\n    if (typeof cornerRadius === 'number') {\n      topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);\n    } else {\n      topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);\n      topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);\n      bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);\n      bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);\n    }\n    context.moveTo(topLeft, 0);\n    context.lineTo(width - topRight, 0);\n    context.arc(width - topRight, topRight, topRight, Math.PI * 3 / 2, 0, false);\n    context.lineTo(width, height - bottomRight);\n    context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);\n    context.lineTo(bottomLeft, height);\n    context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);\n    context.lineTo(0, topLeft);\n    context.arc(topLeft, topLeft, topLeft, Math.PI, Math.PI * 3 / 2, false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}