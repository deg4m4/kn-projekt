{"ast":null,"code":"import { Util } from './Util.js';\nimport { SceneContext, HitContext } from './Context.js';\nimport { Konva } from './Global.js';\nimport { Factory } from './Factory.js';\nimport { getNumberValidator } from './Validators.js';\nvar _pixelRatio;\nfunction getDevicePixelRatio() {\n  if (_pixelRatio) {\n    return _pixelRatio;\n  }\n  var canvas = Util.createCanvasElement();\n  var context = canvas.getContext('2d');\n  _pixelRatio = function () {\n    var devicePixelRatio = Konva._global.devicePixelRatio || 1,\n      backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    return devicePixelRatio / backingStoreRatio;\n  }();\n  Util.releaseCanvas(canvas);\n  return _pixelRatio;\n}\nexport class Canvas {\n  constructor(config) {\n    this.pixelRatio = 1;\n    this.width = 0;\n    this.height = 0;\n    this.isCache = false;\n    var conf = config || {};\n    var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\n    this.pixelRatio = pixelRatio;\n    this._canvas = Util.createCanvasElement();\n    this._canvas.style.padding = '0';\n    this._canvas.style.margin = '0';\n    this._canvas.style.border = '0';\n    this._canvas.style.background = 'transparent';\n    this._canvas.style.position = 'absolute';\n    this._canvas.style.top = '0';\n    this._canvas.style.left = '0';\n  }\n  getContext() {\n    return this.context;\n  }\n  getPixelRatio() {\n    return this.pixelRatio;\n  }\n  setPixelRatio(pixelRatio) {\n    var previousRatio = this.pixelRatio;\n    this.pixelRatio = pixelRatio;\n    this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n  }\n  setWidth(width) {\n    this.width = this._canvas.width = width * this.pixelRatio;\n    this._canvas.style.width = width + 'px';\n    var pixelRatio = this.pixelRatio,\n      _context = this.getContext()._context;\n    _context.scale(pixelRatio, pixelRatio);\n  }\n  setHeight(height) {\n    this.height = this._canvas.height = height * this.pixelRatio;\n    this._canvas.style.height = height + 'px';\n    var pixelRatio = this.pixelRatio,\n      _context = this.getContext()._context;\n    _context.scale(pixelRatio, pixelRatio);\n  }\n  getWidth() {\n    return this.width;\n  }\n  getHeight() {\n    return this.height;\n  }\n  setSize(width, height) {\n    this.setWidth(width || 0);\n    this.setHeight(height || 0);\n  }\n  toDataURL(mimeType, quality) {\n    try {\n      return this._canvas.toDataURL(mimeType, quality);\n    } catch (e) {\n      try {\n        return this._canvas.toDataURL();\n      } catch (err) {\n        Util.error('Unable to get data URL. ' + err.message + ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n        return '';\n      }\n    }\n  }\n}\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\nexport class SceneCanvas extends Canvas {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 0,\n      height: 0\n    };\n    super(config);\n    this.context = new SceneContext(this);\n    this.setSize(config.width, config.height);\n  }\n}\nexport class HitCanvas extends Canvas {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 0,\n      height: 0\n    };\n    super(config);\n    this.hitCanvas = true;\n    this.context = new HitContext(this);\n    this.setSize(config.width, config.height);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}