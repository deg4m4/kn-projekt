{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n  constructor(config) {\n    super(config);\n    this._updated = true;\n    this.anim = new Animation(() => {\n      var updated = this._updated;\n      this._updated = false;\n      return updated;\n    });\n    this.on('animationChange.konva', function () {\n      this.frameIndex(0);\n    });\n    this.on('frameIndexChange.konva', function () {\n      this._updated = true;\n    });\n    this.on('frameRateChange.konva', function () {\n      if (!this.anim.isRunning()) {\n        return;\n      }\n      clearInterval(this.interval);\n      this._setInterval();\n    });\n  }\n  _sceneFunc(context) {\n    var anim = this.animation(),\n      index = this.frameIndex(),\n      ix4 = index * 4,\n      set = this.animations()[anim],\n      offsets = this.frameOffsets(),\n      x = set[ix4 + 0],\n      y = set[ix4 + 1],\n      width = set[ix4 + 2],\n      height = set[ix4 + 3],\n      image = this.image();\n    if (this.hasFill() || this.hasStroke()) {\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n    if (image) {\n      if (offsets) {\n        var offset = offsets[anim],\n          ix2 = index * 2;\n        context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n      } else {\n        context.drawImage(image, x, y, width, height, 0, 0, width, height);\n      }\n    }\n  }\n  _hitFunc(context) {\n    var anim = this.animation(),\n      index = this.frameIndex(),\n      ix4 = index * 4,\n      set = this.animations()[anim],\n      offsets = this.frameOffsets(),\n      width = set[ix4 + 2],\n      height = set[ix4 + 3];\n    context.beginPath();\n    if (offsets) {\n      var offset = offsets[anim];\n      var ix2 = index * 2;\n      context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n    } else {\n      context.rect(0, 0, width, height);\n    }\n    context.closePath();\n    context.fillShape(this);\n  }\n  _useBufferCanvas() {\n    return super._useBufferCanvas(true);\n  }\n  _setInterval() {\n    var that = this;\n    this.interval = setInterval(function () {\n      that._updateIndex();\n    }, 1000 / this.frameRate());\n  }\n  start() {\n    if (this.isRunning()) {\n      return;\n    }\n    var layer = this.getLayer();\n    this.anim.setLayers(layer);\n    this._setInterval();\n    this.anim.start();\n  }\n  stop() {\n    this.anim.stop();\n    clearInterval(this.interval);\n  }\n  isRunning() {\n    return this.anim.isRunning();\n  }\n  _updateIndex() {\n    var index = this.frameIndex(),\n      animation = this.animation(),\n      animations = this.animations(),\n      anim = animations[animation],\n      len = anim.length / 4;\n    if (index < len - 1) {\n      this.frameIndex(index + 1);\n    } else {\n      this.frameIndex(0);\n    }\n  }\n}\nSprite.prototype.className = 'Sprite';\n_registerNode(Sprite);\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n  index: 'frameIndex',\n  getIndex: 'getFrameIndex',\n  setIndex: 'setFrameIndex'\n});","map":null,"metadata":{},"sourceType":"module"}